{"version":3,"file":"static/js/696.0ebcb94d.chunk.js","mappings":"yOACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCYhL,EATmB,SAACA,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACE,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCDhC,EAJgB,SAACN,GACf,OAAO,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMO,W,oBCiCrCC,GAAcC,EAAAA,EAAAA,GAAiB,IAkB/BC,GAAsBC,EAAAA,EAAAA,GAAU,CACpCC,KAAM,wBADoBD,EAhBL,SAACX,GACtB,OACE,kBAAMa,SAAUb,EAAMc,aAAtB,WACE,0BACE,SAACC,EAAA,EAAD,CACEC,YAAa,oGACbV,KAAM,iBACNW,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUZ,QAGzB,6FASN,EAlDgB,SAACR,GACf,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACtC,SAAC,EAAD,CAAYpB,KAAMoB,EAAOpB,KAAsBJ,GAAIwB,EAAOxB,IAAtBwB,EAAOxB,OAGzCyB,EAAmBN,EAAMO,SAASH,KAAI,SAAClB,GAAD,OACxC,SAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQL,OAOlD,OAAKF,EAAM6B,QAGT,iBAAK1B,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,aAAhB,SAAiCmB,KACjC,iBAAKpB,UAAWC,EAAAA,SAAhB,WACE,yBAAMuB,KACN,SAACjB,EAAD,CAAqBG,SAXP,SAACiB,GACnB9B,EAAM+B,YAAYD,EAAOE,0BAGD,SAAC,KAAD,CAAU3B,GAAG,YCHzC,GAAe4B,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAfoB,SAACb,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACa,GACxB,MAAO,CACLJ,YAAa,SAACC,GACZG,GAASC,EAAAA,EAAAA,GAAmBJ,SAOhCK,EAAAA,EAFF,CAGEC,I,iJCpBEC,EAA6B,SAAClB,GAAD,MAAY,CACzCQ,OAAQR,EAAMmB,KAAKX,SAGVQ,EAAmB,SAACI,GAAe,IACxCC,EADuC,0IAE3C,WACE,OAAKC,KAAK3C,MAAM6B,QAET,SAACY,GAAD,UAAeE,KAAK3C,SAFI,SAAC,KAAD,CAAUK,GAAG,eAHH,GACbuC,EAAAA,WAYhC,OAJqCV,EAAAA,EAAAA,IAAQK,EAARL,CACnCQ","sources":["webpack://samurai-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__DzLws\",\"dialogsItems\":\"Dialogs_dialogsItems__kJ73o\",\"active\":\"Dialogs_active__zzXK-\",\"messages\":\"Dialogs_messages__FEv89\",\"message\":\"Dialogs_message__fLFJB\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div> \r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import { Field, reduxForm } from \"redux-form\";\r\nimport React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogsItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Textarea } from \"../common/FormsControl/FormsControl\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((dialog) => (\r\n    <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />\r\n  ));\r\n\r\n  let messagesElements = state.messages.map((message) => (\r\n    <Message message={message.message} key={message.id} />\r\n  ));\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageText);\r\n  };\r\n\r\n  if (!props.isAuth) return <Navigate to=\"/login\" />;\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n        <AddMessageFormRedux onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder={\"Введите сообщение\"}\r\n          name={\"newMessageText\"}\r\n          component={Textarea}\r\n          validate={[required, maxLength50]}\r\n        />\r\n      </div>\r\n      <button>Отправить</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n  form: \"dialogAddMessageForm\",\r\n})(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageText) => {\r\n      dispatch(sendMessageCreator(newMessageText));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n  });\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to=\"/login\" />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n  \r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n"],"names":["props","path","id","className","s","to","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","state","dialogsPage","dialogsElements","dialogs","map","dialog","messagesElements","messages","isAuth","values","sendMessage","newMessageText","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","auth","Component","RedirectComponent","this","React"],"sourceRoot":""}